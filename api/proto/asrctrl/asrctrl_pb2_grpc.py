# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.proto.asrctrl import asrctrl_pb2 as api_dot_proto_dot_asrctrl_dot_asrctrl__pb2


class SpeechStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Recognize = channel.unary_unary(
                '/skill.asr.Speech/Recognize',
                request_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionResponse.FromString,
                )
        self.StreamingRecognize = channel.stream_stream(
                '/skill.asr.Speech/StreamingRecognize',
                request_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionResponse.FromString,
                )
        self.DoCheck = channel.unary_unary(
                '/skill.asr.Speech/DoCheck',
                request_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.CheckCmd.SerializeToString,
                response_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.CheckCmd.FromString,
                )
        self.TextRecognize = channel.unary_unary(
                '/skill.asr.Speech/TextRecognize',
                request_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.TextRecognizeRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.TextRecognizeResponse.FromString,
                )


class SpeechServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Recognize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRecognize(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextRecognize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeechServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Recognize': grpc.unary_unary_rpc_method_handler(
                    servicer.Recognize,
                    request_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionRequest.FromString,
                    response_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionResponse.SerializeToString,
            ),
            'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRecognize,
                    request_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionRequest.FromString,
                    response_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionResponse.SerializeToString,
            ),
            'DoCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.DoCheck,
                    request_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.CheckCmd.FromString,
                    response_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.CheckCmd.SerializeToString,
            ),
            'TextRecognize': grpc.unary_unary_rpc_method_handler(
                    servicer.TextRecognize,
                    request_deserializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.TextRecognizeRequest.FromString,
                    response_serializer=api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.TextRecognizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'skill.asr.Speech', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Speech(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Recognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/skill.asr.Speech/Recognize',
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionRequest.SerializeToString,
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/skill.asr.Speech/StreamingRecognize',
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionRequest.SerializeToString,
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.RecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/skill.asr.Speech/DoCheck',
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.CheckCmd.SerializeToString,
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.CheckCmd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TextRecognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/skill.asr.Speech/TextRecognize',
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.TextRecognizeRequest.SerializeToString,
            api_dot_proto_dot_asrctrl_dot_asrctrl__pb2.TextRecognizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
