# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.proto.tts import fragment_tts_pb2 as api_dot_proto_dot_tts_dot_fragment__tts__pb2


class FragmentTextToSpeechStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SpeechSynthesize = channel.unary_unary(
                '/skill.tts.FragmentTextToSpeech/SpeechSynthesize',
                request_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSResponse.FromString,
                )
        self.StreamingSpeechSynthesize = channel.unary_stream(
                '/skill.tts.FragmentTextToSpeech/StreamingSpeechSynthesize',
                request_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentResponse.FromString,
                )
        self.SupportInfo = channel.unary_unary(
                '/skill.tts.FragmentTextToSpeech/SupportInfo',
                request_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.SupportInfoRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.SupportInfoResponse.FromString,
                )
        self.StreamingMultiModalSynthesize = channel.unary_stream(
                '/skill.tts.FragmentTextToSpeech/StreamingMultiModalSynthesize',
                request_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.MultiModalRequest.SerializeToString,
                response_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.MultiModalResponse.FromString,
                )


class FragmentTextToSpeechServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SpeechSynthesize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingSpeechSynthesize(self, request, context):
        """当对接达闼TTS时，建议使用流式多模态接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SupportInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingMultiModalSynthesize(self, request, context):
        """仅支持达闼TTS流式多模态合成
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FragmentTextToSpeechServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SpeechSynthesize': grpc.unary_unary_rpc_method_handler(
                    servicer.SpeechSynthesize,
                    request_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSRequest.FromString,
                    response_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSResponse.SerializeToString,
            ),
            'StreamingSpeechSynthesize': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamingSpeechSynthesize,
                    request_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSRequest.FromString,
                    response_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentResponse.SerializeToString,
            ),
            'SupportInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SupportInfo,
                    request_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.SupportInfoRequest.FromString,
                    response_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.SupportInfoResponse.SerializeToString,
            ),
            'StreamingMultiModalSynthesize': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamingMultiModalSynthesize,
                    request_deserializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.MultiModalRequest.FromString,
                    response_serializer=api_dot_proto_dot_tts_dot_fragment__tts__pb2.MultiModalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'skill.tts.FragmentTextToSpeech', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FragmentTextToSpeech(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SpeechSynthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/skill.tts.FragmentTextToSpeech/SpeechSynthesize',
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSRequest.SerializeToString,
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingSpeechSynthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/skill.tts.FragmentTextToSpeech/StreamingSpeechSynthesize',
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentTTSRequest.SerializeToString,
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.FragmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SupportInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/skill.tts.FragmentTextToSpeech/SupportInfo',
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.SupportInfoRequest.SerializeToString,
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.SupportInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingMultiModalSynthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/skill.tts.FragmentTextToSpeech/StreamingMultiModalSynthesize',
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.MultiModalRequest.SerializeToString,
            api_dot_proto_dot_tts_dot_fragment__tts__pb2.MultiModalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
